{"version":3,"sources":["mnf_toolkit/frontend/data_sourcing.cljs"],"mappings":";AAKA,8CAAA,9CAAKA;AAEL,mDAAA,nDAAMC,8GAAeC,UAAUC;AAA/B,AACE,YAAA,ZAACC,kCAAqCF;;OAClC,AAACG,MAASH,NACV,sBAAO,WAAKI,jCAKZ,PAGA;AARO,AACE,YAAA,ZAACF,+BAAkC,AAAUE;;AAC7C,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,KAAAC,MAAW,CAAA,yEAAA,XAAuBL,4DAAe,AAAUI;;SACtE,WAAKE;AAAL,AACE,YAAA,6BAAA,zCAACJ,+BAAkCF,cAAc,kDAAA,IAAA,tDAACO,6CAAKD;;AACvD,IAAAE,WAAU,AAACC,sDAAmBH;AAA9B,AAAA,wFAAAE,gCAAAA,hHAACP,yCAAAA,mDAAAA;UACF,WAAKS;AAAL,AACE,qBAAA,2BAAA,zCAACC,+BAAkCX,cAAcU;;;AAGjE,8CAAA,9CAAKE;AAEL,2DAAA,3DAAMC,8HAAuBT;AAA7B,kFACMA,vBACA,gCAAA,YAAA,5CAACU,vBACD,uEAAA,0CAAA,jHAACA,pCACD,yJAAA,KAAA,vJAACC;;AAEP,2DAAA,3DAAMC,8HAAuBZ;AAA7B,AACE,IAAA,AACE,IAAMc,eAAa,AAACL,yDAAsB,AAAA,oFAAOT;IAC3Ce,OAAK,qIAAA,2EAAA,hNAACC,0DAAQ,AAACC,WAAcH;IAC7BI,OAAK,oDAAA,mFAAA,uDAAA,9LAACC,+CAAOJ;IACbK,YAAU,sEAAA,mFAAA,gDAAA,zMAACD,+CAAO,AAACE,iBAAOH;IAC1BI,iBAAe,sDAAA,tDAACC,4CAAIH;IACpBI,mBAAiB,oDAAA,mFAAA,IAAA,gDAAA,IAAA,/LAACL,+CAAOD;IAGzBO,kBAAgB,oDAAA,mFAAA,IAAA,gDAAA,IAAA,/LAACN,+CAAOD;IACxBQ,qBAAmB,oDAAA,mFAAA,KAAA,gDAAA,IAAA,hMAACP,+CAAOD;IAG3BS,kBAAgB,oDAAA,mFAAA,IAAA,gDAAA,IAAA,/LAACR,+CAAOD;IACxBU,qBAAmB,oDAAA,mFAAA,KAAA,gDAAA,IAAA,hMAACT,+CAAOD;AAbjC,AAAA,kDAAA,wDAAA,2CAAA,8HAkByB,4CAAA,WAAAa,vDAACC,lEACD,AAACC,+CAAOC;AADR,AAAM,sDAAAH,iBAAA,mFAAA,gDAAA,IAAA,vMAACZ;4EAlBhC,qEAAA,qFAAA,sDAAA,2CAAA,pQAeyBD,fACAW,jDACA,6CAAA,IAAA,jDAACC,8HAGTL,0EACGC,0PAKK,4CAAA,WAAAS,vDAACH,lEACD,AAACC,+CAAOC;AADR,AAAM,sDAAAC,iBAAA,mFAAA,gDAAA,IAAA,vMAAChB;4EA1BhC,qEAAA,qFAAA,gFAAA,nPAuByBD,fACAW,jDACA,6CAAA,IAAA,jDAACC,8HAGTH,0EACGC,4FAELN,2FACKE;gBAjCtB,GAAA,CAAAX,kBAmCSZ;AAnCT,QAAAY,JAmCkBuB;AAnClB,AAoCI,cAAA,dAAC7B,sCAAyC6B;;AApC9C,kDAAA,wDAAA,2CAAA,4DAAA,iCAAA,qDAAA,KAAA,0DAAA,aAAA,sDAAA,2CAAA,4DAAA,iCAAA,qDAAA,KAAA,0DAAA,aAAA,iEAAA;;AAAA,AAAA,MAAAvB","names":["mnf-toolkit.frontend.data-sourcing/GIST-URL","mnf-toolkit.frontend.data-sourcing/load-edn-file","file-path","callback","js/console.log","js/fetch","response","js/Error","text","cljs.core.subs","G__13712","cljs.reader.read_string","error","js/console.error","mnf-toolkit.frontend.data-sourcing/sheet-id","mnf-toolkit.frontend.data-sourcing/clean-google-response","clojure.string/replace","clojure.string/replace-first","mnf-toolkit.frontend.data-sourcing/parse-google-response","e13715","cleaned-json","data","cljs.core.js__GT_clj","js/JSON.parse","rows","cljs.core.get_in","date-cell","cljs.core/second","formatted-date","cljs.core.get","teams-final-cell","team1-bibs-flag","team1-railway-flag","team2-bibs-flag","team2-railway-flag","cljs.core/rest","cljs.core.take","p1__13713#","cljs.core.map","cljs.core.filter","cljs.core/identity","p1__13714#","e"],"sourcesContent":["(ns mnf-toolkit.frontend.data-sourcing\n  (:require [cljs.reader :as reader]\n            [clojure.string :as clojure.string]))\n\n;; Data Loading\n(def GIST-URL \"https://gist.githubusercontent.com/tbrooksbank/f1a200002e540a23bb6915472198cd7e/raw\")\n\n(defn load-edn-file [file-path callback]\n  (js/console.log \"Attempting to load:\" file-path)\n  (-> (js/fetch file-path)\n      (.then (fn [response]\n               (js/console.log \"Response status:\" (.-status response))\n               (if (.-ok response)\n                 (.text response)\n                 (throw (js/Error. (str \"Failed to load \" file-path \": \" (.-status response)))))))\n      (.then (fn [text]\n               (js/console.log \"Loaded text from\" file-path \":\" (subs text 0 100))\n               (callback (reader/read-string text))))\n      (.catch (fn [error]\n                (js/console.error \"Error loading:\" file-path \":\" error)))))\n\n;; Team Sheets - Sourced from google sheets\n(def sheet-id \"1qWimpverGPBkExhEkStyoUYsejExo6iqMW6AdDV0Q_g\")\n\n(defn clean-google-response [response]\n  (-> response\n      (clojure.string/replace \"/*O_o*/\\n\" \"\")\n      (clojure.string/replace \"google.visualization.Query.setResponse(\" \"\")\n      (clojure.string/replace-first \");\" \"\")))\n\n(defn parse-google-response [response]\n  (try\n    (let [cleaned-json (clean-google-response (:body response))\n          data (js->clj (js/JSON.parse cleaned-json) :keywordize-keys true)\n          rows (get-in data [:table :rows])\n          date-cell (get-in (second rows) [:c 3])\n          formatted-date (get date-cell :v)\n          teams-final-cell (get-in rows [8 :c 3 :v])\n\n          ; Extract flags for team1 (from column B, rows 11-12)\n          team1-bibs-flag (get-in rows [9 :c 0 :v])\n          team1-railway-flag (get-in rows [10 :c 0 :v])\n\n          ; Extract flags for team2 (from column C, rows 11-12)\n          team2-bibs-flag (get-in rows [9 :c 1 :v])\n          team2-railway-flag (get-in rows [10 :c 1 :v])]\n\n      {:team1 {:players (->> rows\n                             rest\n                             (take 8)\n                             (map #(get-in % [:c 0 :v]))\n                             (filter identity))\n               :Bibs team1-bibs-flag\n               :Railway team1-railway-flag}\n\n       :team2 {:players (->> rows\n                             rest\n                             (take 8)\n                             (map #(get-in % [:c 1 :v]))\n                             (filter identity))\n               :Bibs team2-bibs-flag\n               :Railway team2-railway-flag}\n\n       :match-date formatted-date\n       :teams-finalised teams-final-cell})\n\n    (catch js/Error e\n      (js/console.error \"Error during parsing:\" e)\n      {:team1 {:players [] :Bibs nil :Railway nil}\n       :team2 {:players [] :Bibs nil :Railway nil}\n       :match-date nil})))"]}