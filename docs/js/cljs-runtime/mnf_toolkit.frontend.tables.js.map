{"version":3,"sources":["mnf_toolkit/frontend/tables.cljs"],"mappings":"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","names":["mnf-toolkit.frontend.tables/format-value","v","js/Date","cljs.core/integer?","mnf-toolkit.frontend.tables/sort-by-key","data","key-name","ascending?","comparator","cljs.core/compare","cljs.core.comp","cljs.core/-","p1__13263#","cljs.core.sort_by","cljs.core.get","mnf-toolkit.frontend.tables/league-columns","mnf-toolkit.frontend.tables/player-columns","mnf-toolkit.frontend.tables/data-table","table-type","state","reagent.core.atom","columns","G__13264","cljs.core/Keyword","cljs.core/vec","cljs.core/keys","cljs.core/first","_","and__5000__auto__","cljs.core/seq","cljs.core.doall","iter__5480__auto__","s__13266","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__13268","cljs.core/chunk-buffer","i__13267","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13265","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","header","cljs.core.swap_BANG_","s","cljs.core._EQ_","cljs.core.update","cljs.core/not","cljs.core/deref","cljs.core/name","sorted-data","s__13270","b__13272","i__13271","iter__13269","row","cljs.core/hash","s__13274","b__13276","i__13275","iter__13273","s__13278","b__13280","i__13279","iter__13277","mnf-toolkit.frontend.tables/format-date","date-str","mnf-toolkit.frontend.tables/format-match-row","match","cljs.core.get_in","p__13281","map__13282","cljs.core/--destructure-map","mnf-toolkit.frontend.tables/match-detail","bibs-players","colours-players","railway","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns mnf-toolkit.frontend.tables\n  (:require [reagent.core :as r]\n            [clojure.string :as clojure.string]))\n\n;; Components\n(defn format-value [v]\n  (cond\n    (instance? js/Date v) (.toLocaleDateString v)\n    (number? v) (if (integer? v) v (.toFixed v 2))  ; Format decimals to 2 places, keep integers as is\n    :else (str v)))\n\n(defn sort-by-key [data key-name ascending?]\n  (let [comparator (if ascending? compare (comp - compare))]\n    (sort-by #(get % key-name) comparator data)))\n\n;; Define the column orders\n(def league-columns\n  [:player :played :won :drawn :lost :points :gf :ga :gd])\n\n(def player-columns\n  [:player :current-rating :lifetime-rating :baseline-rating])\n\n(defn data-table [data table-type]\n  (let [state (r/atom {:sort-key nil\n                       :ascending? true})\n        columns (case table-type\n                  :league league-columns\n                  :player player-columns\n                  (vec (keys (first data))))]\n    (fn [data _]\n      (if (and data (seq data))\n        [:table.data-table\n         [:thead\n          [:tr\n           (doall\n            (for [header columns]\n              ^{:key header}\n              [:th.sortable\n               {:on-click #(swap! state (fn [s]\n                                          (if (= (:sort-key s) header)\n                                            (update s :ascending? not)\n                                            {:sort-key header\n                                             :ascending? true})))\n                :class (when (= header (:sort-key @state))\n                         (if (:ascending? @state) \"sort-asc\" \"sort-desc\"))}\n               (name header)]))]]\n         [:tbody\n          (doall\n           (let [sorted-data (if (:sort-key @state)\n                               (sort-by-key data (:sort-key @state) (:ascending? @state))\n                               data)]\n             (for [row sorted-data]\n               ^{:key (hash row)}\n               [:tr\n                (doall\n                 (for [header columns]\n                   ^{:key (str (hash row) header)}\n                   [:td (format-value (get row header))]))])))]]\n        [:div \"No data available\"]))))\n\n;; Add data formatting functions\n(defn format-date [date-str]\n  (.toLocaleDateString (js/Date. date-str)))\n\n(defn format-match-row [match]\n  {:id (:match-id match)\n   :date (format-date (:date match))\n   :bibs-team \"Team Bibs\"\n   :bibs-score (get-in match [:team-bibs-data :goals])\n   :colours-score (get-in match [:team-colours-data :goals])\n   :colours-team \"Team Colours\"\n   :bibs-players (get-in match [:team-bibs-data :players])\n   :colours-players (get-in match [:team-colours-data :players])\n   :railway (get-in match [:team-bibs-data :railway])})\n\n;; Add match detail component\n(defn match-detail [{:keys [bibs-players colours-players railway]}]\n  [:div.match-detail\n   [:div.team-detail\n    [:h4 \"Team Bibs\"]\n    [:p (str \"Players: \" (clojure.string/join \", \" bibs-players))]\n    [:p (str \"Railway End: \" (if railway \"Yes\" \"No\"))]]\n   [:div.team-detail\n    [:h4 \"Team Colours\"]\n    [:p (str \"Players: \" (clojure.string/join \", \" colours-players))]\n    [:p (str \"Railway End: \" (if (not railway) \"Yes\" \"No\"))]]])"]}