{"version":3,"sources":["mnf_toolkit/frontend/site.cljs"],"mappings":"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","names":["js/goog.define","mnf-toolkit.frontend.site/BASE-PATH","js/mnf-toolkit","js/mnf-toolkit.frontend","js/mnf-toolkit.frontend.site","js/mnf-toolkit.frontend.site.root-atom","mnf-toolkit.frontend.site/root-atom","cljs.core.atom","mnf-toolkit.frontend.site/app-state","reagent.core.atom","mnf-toolkit.frontend.site/nav-state","mnf-toolkit.frontend.site/handle-hash-change","_","hash","js/window","tab","cljs.core/empty?","cljs.core.subs","cljs.core.swap_BANG_","cljs.core/assoc","mnf-toolkit.frontend.site/init-routing!","mnf-toolkit.frontend.site/load-edn-file","file-path","callback","js/console.log","js/fetch","response","js/Error","text","G__12074","cljs.reader.read_string","error","js/console.error","mnf-toolkit.frontend.site/load-data!","cljs.core.println","p1__12075#","mnf-toolkit.frontend.site/format-value","v","js/Date","cljs.core/integer?","mnf-toolkit.frontend.site/sort-by-key","data","key-name","ascending?","comparator","cljs.core/compare","cljs.core.comp","cljs.core/-","p1__12076#","cljs.core.sort_by","cljs.core.get","mnf-toolkit.frontend.site/league-columns","mnf-toolkit.frontend.site/player-columns","mnf-toolkit.frontend.site/data-table","table-type","state","columns","G__12077","cljs.core/Keyword","cljs.core/vec","cljs.core/keys","cljs.core/first","and__5000__auto__","cljs.core/seq","cljs.core.doall","iter__5480__auto__","s__12079","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__12081","cljs.core/chunk-buffer","i__12080","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12078","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","header","s","cljs.core._EQ_","cljs.core.update","cljs.core/not","cljs.core/deref","cljs.core/name","sorted-data","s__12083","b__12085","i__12084","iter__12082","row","cljs.core/hash","s__12087","b__12089","i__12088","iter__12086","s__12091","b__12093","i__12092","iter__12090","mnf-toolkit.frontend.site/team-sheet","mnf-toolkit.frontend.site/league-table-component","mnf-toolkit.frontend.site/league-history-component","mnf-toolkit.frontend.site/match-results","mnf-toolkit.frontend.site/player-info","mnf-toolkit.frontend.site/nav-link","id","label","active-tab","mnf-toolkit.frontend.site/navigation","menu-open?","cljs.core/update","mnf-toolkit.frontend.site/main-content","G__12094","mnf-toolkit.frontend.site/app","mnf-toolkit.frontend.site/init!","cljs.core/reset!","reagent.dom.client/create-root","js/document","reagent.dom.client.render","js/mnf-toolkit.frontend.site.start","mnf-toolkit.frontend.site/start","cljs.core/chunk-first"],"sourcesContent":["(ns mnf-toolkit.frontend.site\n  #_{:clj-kondo/ignore [:unused-namespace]}\n  (:require [reagent.core :as r]\n            [reagent.dom.client :as rdom]\n            [cljs.reader :as reader]\n            [goog.events :as events]))\n\n(goog-define BASE-PATH \"\")  ; This will be set by shadow-cljs based on environment\n\n;; State\n(defonce root-atom (atom nil))\n\n(def app-state\n  (r/atom {:active-tab \"team-sheet\"\n           :league-table nil\n           :player-info nil}))\n\n(def nav-state (r/atom {:menu-open? false}))\n\n;; Navigation handling\n(defn handle-hash-change [_]\n  (let [hash (.. js/window -location -hash)\n        tab (if (empty? hash)\n              \"team-sheet\"  ; default tab\n              (subs hash 1))]  ; remove the # from the hash\n    (swap! app-state assoc :active-tab tab)))\n\n;; Set up hash change listener\n(defn init-routing! []\n  (.addEventListener js/window \"hashchange\" handle-hash-change)\n  (handle-hash-change nil))  ; Handle initial route\n\n;; Data Loading\n(defn load-edn-file [file-path callback]\n  (js/console.log \"Attempting to load:\" (str BASE-PATH file-path))\n  (-> (js/fetch (str BASE-PATH file-path))\n      (.then (fn [response]\n               (js/console.log \"Response status:\" (.-status response))\n               (if (.-ok response)\n                 (.text response)\n                 (throw (js/Error. (str \"Failed to load \" file-path \": \" (.-status response)))))))\n      (.then (fn [text]\n               (js/console.log \"Loaded text from\" file-path \":\" (subs text 0 100))\n               (callback (reader/read-string text))))\n      (.catch (fn [error]\n                (js/console.error \"Error loading\" file-path \":\" error)))))\n\n(defn load-data! []\n  (println \"Loading data...\")\n  (load-edn-file \"/data/mnf-data.edn\"\n                 #(do\n                    (println \"Data loaded\")\n                    (swap! app-state assoc\n                           :league-table (:league-table %)\n                           :player-info (:player-info %)))))\n\n;; Components\n(defn format-value [v]\n  (cond\n    (instance? js/Date v) (.toLocaleDateString v)\n    (number? v) (if (integer? v) v (.toFixed v 2))  ; Format decimals to 2 places, keep integers as is\n    :else (str v)))\n\n(defn sort-by-key [data key-name ascending?]\n  (let [comparator (if ascending? compare (comp - compare))]\n    (sort-by #(get % key-name) comparator data)))\n\n;; Define the column orders\n(def league-columns\n  [:player :played :won :drawn :lost :points :gf :ga :gd])\n\n(def player-columns\n  [:player :current-rating :lifetime-rating :baseline-rating])\n\n(defn data-table [data table-type]\n  (let [state (r/atom {:sort-key nil\n                       :ascending? true})\n        columns (case table-type\n                  :league league-columns\n                  :player player-columns\n                  (vec (keys (first data))))]\n    (fn [data _]\n      (if (and data (seq data))\n        [:table.data-table\n         [:thead\n          [:tr\n           (doall\n            (for [header columns]\n              ^{:key header}\n              [:th.sortable\n               {:on-click #(swap! state (fn [s]\n                                          (if (= (:sort-key s) header)\n                                            (update s :ascending? not)\n                                            {:sort-key header\n                                             :ascending? true})))\n                :class (when (= header (:sort-key @state))\n                         (if (:ascending? @state) \"sort-asc\" \"sort-desc\"))}\n               (name header)]))]]\n         [:tbody\n          (doall\n           (let [sorted-data (if (:sort-key @state)\n                               (sort-by-key data (:sort-key @state) (:ascending? @state))\n                               data)]\n             (for [row sorted-data]\n               ^{:key (hash row)}\n               [:tr\n                (doall\n                 (for [header columns]\n                   ^{:key (str (hash row) header)}\n                   [:td (format-value (get row header))]))])))]]\n        [:div \"No data available\"]))))\n\n(defn team-sheet []\n  [:div.section\n   [:h2 \"Team Sheet\"]\n   [:p \"Coming soon\"]])\n\n(defn league-table-component []\n  [:div.section\n   [:h2 \"League Table\"]\n   [:p \"Coming soon\"]])\n\n(defn league-history-component []\n  [:div.section\n   [:h2 \"All Time League Table\"]\n   (let [data (:league-table @app-state)]\n     (if (nil? data)\n       [:div \"Loading league table...\"]\n       [data-table data :league]))])\n\n(defn match-results []\n  [:div.section\n   [:h2 \"Match Results\"]\n   [:p \"Coming soon\"]])\n\n(defn player-info []\n  [:div.section\n   [:h2 \"Player Info\"]\n   [:p \"Coming soon\"]])\n\n(defn nav-link [id label active-tab]\n  [:a.nav-link\n   {:href (str \"#\" id)\n    :class (when (= active-tab id) \"active\")\n    :on-click #(swap! nav-state assoc :menu-open? false)}  ; Close menu on click\n   label])\n\n(defn navigation []\n  (let [active-tab (:active-tab @app-state)\n        menu-open? (:menu-open? @nav-state)]\n    [:nav.navbar\n     [:div.nav-brand\n      [:button.hamburger\n       {:on-click #(swap! nav-state update :menu-open? not)}\n       [:span.hamburger-box\n        [:span.hamburger-inner]]]]\n     [:div.nav-menu {:class (when menu-open? \"is-open\")}\n      [:div.nav-left\n       [nav-link \"team-sheet\" \"Team Sheet\" active-tab]\n       [nav-link \"league-table\" \"League Table\" active-tab]\n       [nav-link \"all-time-league-table\" \"All Time League Table\" active-tab]\n       [nav-link \"match-results\" \"Match Results\" active-tab]\n       [nav-link \"players\" \"Player Info\" active-tab]]]]))\n\n(defn main-content []\n  (let [active-tab (:active-tab @app-state)]\n    [:div.content\n     (case active-tab\n       \"team-sheet\" [team-sheet]\n       \"league-table\" [league-table-component]\n       \"all-time-league-table\" [league-history-component]\n       \"match-results\" [match-results]\n       \"players\" [player-info]\n       [team-sheet])]))\n\n(defn app []\n  [:div\n   [navigation]\n   [main-content]\n   [:footer.footer\n    [:a {:href \"https://github.com/tbrooksbank/mnf-toolkit\"\n         :target \"_blank\"\n         :rel \"noopener noreferrer\"}\n     \"Source Code\"]\n    [:span \" | \"]\n    [:span \"Tom Brooksbank \u00a9 2025\"]]])\n\n;; Initialize app\n(defn init! []\n  (load-data!)\n  (when-not @root-atom\n    (reset! root-atom (rdom/create-root (.getElementById js/document \"app\"))))\n  (init-routing!)  ; Initialize routing\n  (rdom/render @root-atom [app]))\n\n;; Initialize once\n#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}\n(defonce start\n  (init!))"]}