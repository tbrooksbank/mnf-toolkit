{"version":3,"sources":["mnf_toolkit/frontend/site.cljs"],"mappings":";AAWA;;;sCAAA,AAAAA,YAAA,sCAAA,xFAAaC;AAGb,GAAA,QAAAC,wCAAAC,iDAAAC,sDAAAC;AAAA;AAAA,AAAA,AAASC,sCAAU,6CAAA,7CAACC;;AAEpB,AAAKC,sCACH,gDAAA,2CAAA,iEAAA,aAAA,qEAAA,KAAA,sFAAA,KAAA,gEAAA,KAAA,mEAAA,tdAACC;AAMH,AAAKC,sCAAU,gDAAA,2CAAA,kEAAA,7JAACD;AAGhB,+CAAA,/CAAME,sGAAoBC;AAA1B,AACE,IAAMC,OAAK,AAAA,AAAIC;IACTC,MAAI,gCAAA,9BAAI,AAACC,uBAAOH,oBAEV,kDAAA,lDAACI,6CAAKJ;AAHlB,AAIE,8GAAA,vGAACK,mDAAMV,oCAAUW,iFAAkBJ;;AAGvC,+CAAA,/CAAMK;AAAN,AACE,wBAAA,xBAAmBN,qCAAuBH;;AAC1C,oDAAA,7CAACA;;AAGH,0CAAA,1CAAMU,4FAAeC,UAAUC;AAA/B,AACE,YAAA,ZAACC,kCAAqC,CAAKvB,gFAAUqB;;OACjD,AAACG,MAAS,CAAKxB,gFAAUqB,vFACzB,kHAAO,WAAKI,7HAKZ,PAGA;AARO,AACE,YAAA,ZAACF,+BAAkC,AAAUE;;AAC7C,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,KAAAC,MAAW,CAAA,yEAAA,XAAuBL,4DAAe,AAAUI;;SACtE,WAAKE;AAAL,AACE,YAAA,6BAAA,zCAACJ,+BAAkCF,cAAc,kDAAA,IAAA,tDAACL,6CAAKW;;AACvD,IAAAC,WAAU,AAACC,sDAAmBF;AAA9B,AAAA,wFAAAC,gCAAAA,hHAACN,yCAAAA,mDAAAA;UACF,WAAKQ;AAAL,AACE,qBAAA,0BAAA,xCAACC,8BAAiCV,cAAcS;;;AAEhE,4CAAA,5CAAME;AAAN,AACE,yGAAA,zGAACC;;AACD,+CAAA,qBAAA,WAAAC,xEAACd;AAAD,AACgB,AACE,yGAAA,zGAACa;;AACD,qHAAA,4OAAA,uNAAA,sLAAA,vuBAAChB,0DAAMV,oCAAUW,qFACI,AAAA,mGAAAgB,0JACQ,AAAA,+GAAAA,qFACT,AAAA,iGAAAA,kFACD,AAAA,8FAAAA;;;AAGvC,yCAAA,zCAAMC,0FAAcC;AAApB,AACE,GACE,cAAWC,bAAQD;AAAG,OAAqBA;;AAD7C,GAEE,OAASA;AAAG,GAAI,AAACE,yBAASF;AAAGA;;AAAE,iBAAA,VAAUA;;;AAF3C,AAGQ,mDAAKA;;;;;AAEf,wCAAA,xCAAMG,wFAAaC,KAAKC,SAASC;AAAjC,AACE,IAAMC,aAAW,kBAAID,kBAAWE,kBAAQ,AAACC,6CAAKC,YAAEF;AAAhD,AACE,uDAAA,WAAAG,3DAACC;AAAD,AAAU,mDAAAD,5CAACE,6DAAMR;GAAUE,WAAWH;;AAG1C,2CAAA,mFAAA,wDAAA,0DAAA,kDAAA,uDAAA,qDAAA,0DAAA,kDAAA,kDAAA,5iBAAKU;AAGL,2CAAA,mFAAA,wDAAA,wEAAA,2EAAA,zUAAKC;AAGL,uCAAA,vCAAMC,sFAAYZ,KAAKa;AAAvB,AACE,IAAMC,QAAM,gDAAA,2CAAA,6DAAA,KAAA,gEAAA,7NAAC9C;IAEP+C,UAAQ,iBAAAC,WAAMH;IAANG,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACUN;;;KADV;AAEUC;;;;AACR,OAACO,cAAI,AAACC,eAAK,AAACC,gBAAMpB;;;;AALlC,AAME,kBAAKA,SAAK7B;AAAV,AACE,oBAAI,iBAAAkD,oBAAKrB;AAAL,AAAA,oBAAAqB;AAAU,OAACC,cAAItB;;AAAfqB;;;AAAJ,0FAAA,2EAAA,mFAAA,uDAAA,mFAAA,kDAIK,AAACE,8CACA,iBAAAC,qBAAA,6DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAL,cAAAG;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAs3EuC,AAAAsK,sBAAA1K;IAt3EvCK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,aAAA,AAAAK,eAAAN,gBAAAK,xCAAMS;AAAN,AAAA,AAAA,AAAAP,uBAAAJ,SAAA,oBAAA,mFAAA,oEAAA,2CAAA,6DAAA;;AAAA,AAGe,OAACvD,mDAAMqC,MAAM;kBAAK8B;AAAL,AACE,GAAI,AAACC,6CAAE,AAAA,2FAAWD,GAAGD;AACnB,wDAAA,jDAACG,+CAAOF,kEAAcG;;AADxB,kDAAA,oEAAA,gEAAA,vEAEaJ;;;;;CAN3C,ibAAA,2CAAA,oDACSA,xdAOE,2KAAA,iKAAA,1UAAM,AAACE,6CAAEF,OAAO,AAAA,2FAAA,AAAAK,gBAAYlC,UAC1B,yIAAA,WAAA,lIAAI,AAAA,8FAAA,AAAAkC,gBAAclC,+CAC5B,AAACmC,eAAKN;;AAVT,eAAA,CAAAT,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mDAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,aAAA,AAAAZ,gBAAAK,zBAAMkB;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,oEAAA,2CAAA,6DAAA;;AAAA,AAGe,OAAChE,mDAAMqC,MAAM,WAAK8B;AAAL,AACE,GAAI,AAACC,6CAAE,AAAA,2FAAWD,GAAGD;AACnB,wDAAA,jDAACG,+CAAOF,kEAAcG;;AADxB,kDAAA,oEAAA,gEAAA,vEAEaJ;;;;CAN3C,ibAAA,2CAAA,oEAAA,AAAAJ,mDAAA,AAAAG,eAAAjB,lFACSkB,xdAOE,2KAAA,iKAAA,1UAAM,AAACE,6CAAEF,OAAO,AAAA,2FAAA,AAAAK,gBAAYlC,UAC1B,yIAAA,WAAA,lIAAI,AAAA,8FAAA,AAAAkC,gBAAclC,+CAC5B,AAACmC,eAAKN;;;AAVT;;;;GAAA,KAAA;;AAAA,AAAA,OAAAnB,mBAAaT;sBALnB,mFAAA,sDAiBI,AAACQ,8CACA,iBAAM2B,cAAY,kBAAI,AAAA,2FAAA,AAAAF,gBAAYlC,SACd,AAACf,sCAAYC,SAAK,AAAA,2FAAA,AAAAgD,gBAAYlC,QAAO,AAAA,8FAAA,AAAAkC,gBAAclC,SACnDd;AAFpB,AAGE,IAAAwB,qBAAA,6DAAA2B;AAAA,AAAA,YAAAzB,kBAAA,KAAA;AAAA,AAAA,IAAAyB,eAAAA;;AAAA,AAAA,IAAAxB,qBAAA,AAAAL,cAAA6B;AAAA,AAAA,GAAAxB;AAAA,AAAA,IAAAwB,eAAAxB;AAAA,AAAA,GAAA,AAAAC,6BAAAuB;AAAA,IAAAtB,kBAs2EsC,AAAAsK,sBAAAhJ;IAt2EtCrB,qBAAA,AAAAC,gBAAAF;IAAAuB,WAAA,AAAAnB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAuB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvB;AAAA,UAAA,AAAAK,eAAAN,gBAAAwB,rCAAME;AAAN,AAAA,AAAA,AAAAnB,uBAAAgB,SAAA,oBAAA,mFAAA,kDAGG,AAAC7B,8CACA,iBAAAC,qBAAA;kFAAAiC;AAAA,AAAA,YAAA/B,kBAAA,KAAA;;AAAA,AAAA,IAAA+B,eAAAA;;AAAA,AAAA,IAAA9B,yBAAA,AAAAL,cAAAmC;AAAA,AAAA,GAAA9B;AAAA,AAAA,IAAA8B,eAAA9B;AAAA,AAAA,GAAA,AAAAC,6BAAA6B;AAAA,IAAA5B,sBAk2EkC,AAAAsK,sBAAA1I;IAl2ElC3B,yBAAA,AAAAC,gBAAAF;IAAA6B,WAAA,AAAAzB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA6B,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA7B;AAAA,aAAA,AAAAK,eAAAN,oBAAA8B,5CAAMhB;AAAN,AAAA,AAAA,AAAAP,uBAAAsB,SAAA,oBAAA,mFAAA,yJAAA,2CAAA,oDACS,6CAAK,AAACF,eAAKD,kDAAKZ,rTAClB,AAAChD,uCAAa,AAACc,4CAAI8C,IAAIZ;;AAF9B,eAAA,CAAAgB,WAAA;;;;AAAA;;;;;AAAA,OAAAtB,qBAAA,AAAAC,gBAAAoB,UAAA,AAAAE,iEAAA,AAAApB,qBAAAiB;;AAAA,OAAApB,qBAAA,AAAAC,gBAAAoB,UAAA;;;AAAA,aAAA,AAAAtC,gBAAAqC,zBAAMd;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,yJAAA,2CAAA,6LAAA,AAAAmB,iEAAA,AAAAlB,eAAAe,zNACS,6CAAK,AAACD,eAAKD,kDAAKZ,rTAClB,AAAChD,uCAAa,AAACc,4CAAI8C,IAAIZ;;;AAF9B;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAnB,mBAAaT;cAJjB,2CAAA,oDACS,AAACyC,eAAKD;;AADf,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAAhB,qBAAA,AAAAC,gBAAAc,UAAA,AAAAE,mDAAA,AAAAd,qBAAAW;;AAAA,OAAAd,qBAAA,AAAAC,gBAAAc,UAAA;;;AAAA,UAAA,AAAAhC,gBAAA+B,tBAAMI;AAAN,AAAA,OAAAd,eAAA,oBAAA,mFAAA,kDAGG,AAAClB,8CACA,iBAAAC,qBAAA;kFAAAqC;AAAA,AAAA,YAAAnC,kBAAA,KAAA;AAAA,AAAA,IAAAmC,eAAAA;;AAAA,AAAA,IAAAlC,yBAAA,AAAAL,cAAAuC;AAAA,AAAA,GAAAlC;AAAA,AAAA,IAAAkC,eAAAlC;AAAA,AAAA,GAAA,AAAAC,6BAAAiC;AAAA,IAAAhC,kBAk2EkC,AAAAsK,sBAAAtI;IAl2ElC/B,qBAAA,AAAAC,gBAAAF;IAAAiC,WAAA,AAAA7B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAiC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjC;AAAA,aAAA,AAAAK,eAAAN,gBAAAkC,xCAAMpB;AAAN,AAAA,AAAA,AAAAP,uBAAA0B,SAAA,oBAAA,mFAAA,yJAAA,2CAAA,oDACS,6CAAK,AAACN,eAAKD,kDAAKZ,rTAClB,AAAChD,uCAAa,AAACc,4CAAI8C,IAAIZ;;AAF9B,eAAA,CAAAoB,WAAA;;;;AAAA;;;;;AAAA,OAAA1B,qBAAA,AAAAC,gBAAAwB,UAAA,AAAAE,iEAAA,AAAAxB,qBAAAqB;;AAAA,OAAAxB,qBAAA,AAAAC,gBAAAwB,UAAA;;;AAAA,aAAA,AAAA1C,gBAAAyC,zBAAMlB;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,yJAAA,2CAAA,6LAAA,AAAAuB,iEAAA,AAAAtB,eAAAmB,zNACS,6CAAK,AAACL,eAAKD,kDAAKZ,rTAClB,AAAChD,uCAAa,AAACc,4CAAI8C,IAAIZ;;;AAF9B;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAnB,mBAAaT;cAJjB,2CAAA,iFAAA,AAAAuC,mDAAA,AAAAZ,eAAAS,/FACS,AAACK,eAAKD;;;AADf;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/B,mBAAU0B;;;AArBjB,0FAAA,mDAAA;;;;AA+BN,qCAAA,rCAAKe;AAEL,kDAAA,lDAAMC,4GAAuBjF;AAA7B,kFACMA,vBACA,gCAAA,YAAA,5CAACkF,vBACD,uEAAA,0CAAA,jHAACA,pCACD,yJAAA,KAAA,vJAACC;;AAEP,kDAAA,lDAAMC,4GAAuBpF;AAA7B,AACE,IAAA,AACE,IAAMsF,eAAa,AAACL,gDAAsB,AAAA,oFAAOjF;IAC3Ce,OAAK,qIAAA,2EAAA,hNAACwE,0DAAQ,AAACC,WAAcF;IAC7BG,OAAK,oDAAA,mFAAA,uDAAA,9LAACC,+CAAO3E;IACb4E,YAAU,sEAAA,mFAAA,gDAAA,zMAACD,+CAAO,AAACE,iBAAOH;IAC1BI,iBAAe,sDAAA,tDAACrE,4CAAImE;IACpBG,mBAAiB,oEAAA,mFAAA,gDAAA,IAAA,3MAACJ,+CAAO,AAACK,eAAKN;AALrC,AAAA,kDAAA,0HAQe,4CAAA,WAAAO,vDAACC,lEACD,AAACC,+CAAOC;AADR,AAAM,sDAAAH,iBAAA,mFAAA,gDAAA,IAAA,vMAACN;0BARtB,RAMeD,fACAhC,AACA,+IAIA,4CAAA,WAAA2C,vDAACH,lEACD,AAACC,+CAAOC;AADR,AAAM,sDAAAC,iBAAA,mFAAA,gDAAA,IAAA,vMAACV;0BAZtB,gFAAA,xFAUeD,fACAhC,AACA,wFAEAoC,2FACKC;gBAhBtB,GAAA,CAAAT,kBAiBSpF;AAjBT,QAAAoF,JAiBkBgB;AAjBlB,AAkBI,cAAA,dAAC/F,sCAAyC+F;;AAlB9C,kDAAA,wDAAA,iCAAA,sDAAA,iCAAA,iEAAA;;AAAA,AAAA,MAAAhB;;;;AAqBF,uCAAA,vCAAMiB;AAAN,AACE,IAAMC,QAAM,gDAAA,2CAAA,wDAAA,iCAAA,sDAAA,iCAAA,iEAAA,KAAA,4EAAA,7ZAACxH;AAAb,AAIE,+DAAA,2CAAA,nGAACyH,uLAEC;AAAA,AACE,IAAAC,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,6EAAA,YAAA,eAAA,oBAAA,eAAA,jGAEiBhC;IAFjBiC,aAAA,YAAA,iCAAAD,7CAQWlH;IARXoH,aAAA,CAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAC,uCAAAH,WAAAC;IAAAG,aAAA,0DAAAN,6DAAAI,vHASsBmC;IATtBzC,kBAAA,iBAAAS,iBAAAT;AAAA,AAAA,CAAAS,eAAA,OAAAN;;AAAAM;;AAAA,AAAA,OAAAC,4CAAAV,gBAAA,IAAAQ;;AAAA,GAAA,CAAAP,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAAA,kBAAA,iBAAAY,iBAAAZ;AAAA,AAAA,CAAAY,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,IAAAC,uBAAAb;AAAA,AAAA,CAAAa,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAZ,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAA5H,IAAA,iBAAA0I,iBAAAd;AAAA,AAAA,CAAAc,eAAA,OAAA,AAAApE,eAAA,IAAA,CAAAsD,YAAA;;AAAAc;;IAAAC,aAAA,gDAAAJ,hDAWyBrC;IAXzB0C,aAAA,4BAAAD,5BAYS2B,sBAAOjD;IAZhBrH,QAAA,iBAAA6I,iBAAAjB;AAAA,AAAA,CAAAiB,eAAA,OAAA,AAAAtE,eAAA,CAAAqD,YAAA;;AAAAiB;;IAAAjB,kBAAAA;AAAA,AAAA,AAAA,IAAAkB,uBAAAlB;AAAA,AAAA,CAAAkB,qBAAA,OAAAF;;AAAA,CAAAE,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAjB,oBAAA;AAAA,IAAAkB,aAAA,CAAAnB,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAoB,6CAAApB,gBAAAmB;;AAAA,GAAA,CAAAlB,oBAAA;AAAA,IAAAoB,aAAA,CAAArB,YAAA;IAAAsB,aAAA,cAAA,0BAAAD,xCAcS7H;IAdTwG,kBAAAA;AAAA,AAAA,AAAA,IAAAuB,uBAAAvB;AAAA,AAAA,CAAAuB,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAtB,oBAAA;AAAA,IAAA7H,IAAA,iBAAAoJ,iBAAAxB;AAAA,AAAA,CAAAwB,eAAA,OAAA,AAAA7E,eAAA,CAAAqD,YAAA;;AAAAwB;;IAAAxB,kBAAAA;AAAA,AAAA,IAAAyB,UAAA,CAAAzB,gBAAA;AAAA,AAAA,IAAA0B,uBAAA1B;AAAA,AAAA,CAAA0B,qBAAA,OAAAD;;AAAAC;AAAA,GAAA,CAAAD,mBAaatI;AAbb,IAAAwI,uBAAA3B;AAAA,AAAA,CAAA2B,qBAAA,OAAA;;AAAA,CAAAA,qBAAA,OAAA;;AAAAA;AAAA,AAAA,MAAAF;;;;AAAA;;AAAA;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAG,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;wFAAA5B;;AAAA,AAAA,IAAA8B,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAhC,sBAAAC;AAAA,AAAA,GAAA,AAAAgC,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAnC;AAAA,AAAA,CAAAmC,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAA5G,cAAA,CAAAyE,YAAA;AAAA,IAAAoC,uBAAApC;AAAA,AAAA,CAAAoC,qBAAA,OAAA,AAAA/G,gBAAA,CAAA2E,YAAA;;AAAAoC;AAAA,MAAAH;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAA9B;;;;AAAA8B;;;;;+EAAA9B;;;;;wFAAAA;;;;;;;;;IAAAqC,uBAAA,iBAAAC,iBAAA,AAAAxC;AAAA,AAAA,CAAAwC,eAAAC,AAAA,OAAA5C;;AAAA2C;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAA1C;GAHJ,yEAoBE;AAAA,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,+BAAA,mFAAA,iDAEQ,iBAAAgD,qBAAc,AAAA,+FAAA,AAAA1F,gBAAcwC;AAA5B,AAAA,oBAAAkD;AAAA,WAAAA,PAASC;AAAT,AACE,0DAAA,NAAKA;;AADP;;aAFR,mFAAA,+SAAA,mFAAA,mDAAA,2CAAA,wDAAA,veAKQ,yLAAA,kBAAA,zMAAI,+KAAA,/KAAC9F,6CAAE,AAAA,0GAAA,AAAAG,gBAAmBwC,uVAI9B,iBAAAhE,qBAAA,6DAAAoH;AAAA,AAAA,YAAAlH,kBAAA,KAAA;AAAA,AAAA,IAAAkH,eAAAA;;AAAA,AAAA,IAAAjH,qBAAA,AAAAL,cAAAsH;AAAA,AAAA,GAAAjH;AAAA,AAAA,IAAAiH,eAAAjH;AAAA,AAAA,GAAA,AAAAC,6BAAAgH;AAAA,IAAA/G,kBA4xEyC,AAAAsK,sBAAAvD;IA5xEzC9G,qBAAA,AAAAC,gBAAAF;IAAAgH,WAAA,AAAA5G,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAgH,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAhH;AAAA,gBAAA,AAAAK,eAAAN,gBAAAiH,3CAAME;AAAN,AAAA,AAAA,AAAA5G,uBAAAyG,SAAA,oBAAA,mFAAA,mDAAA,2CAAA,wDAAA,4BAAA,mFAAA,uJAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,4EAAA,pcAQQ,AAAA,mFAAOG,wYAEX,iBAAAxH,qBAAA;kFAAAyH;AAAA,AAAA,YAAAvH,kBAAA,KAAA;;AAAA,AAAA,IAAAuH,eAAAA;;AAAA,AAAA,IAAAtH,yBAAA,AAAAL,cAAA2H;AAAA,AAAA,GAAAtH;AAAA,AAAA,IAAAsH,eAAAtH;AAAA,AAAA,GAAA,AAAAC,6BAAAqH;AAAA,IAAApH,sBAkxEqC,AAAAsK,sBAAAlD;IAlxErCnH,yBAAA,AAAAC,gBAAAF;IAAAqH,WAAA,AAAAjH,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAqH,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAArH;AAAA,aAAA,AAAAK,eAAAN,oBAAAsH,5CAAMQ;AAAN,AAAA,AAAA,AAAAvH,uBAAA8G,SAAA,oBAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,4EAAA,UAAA,sEAAA,MAAA,iEAAA,4BAAA,sEAAA,OAAA,2DAAA,OAAA,gEAAA,+BAAA,uEAAA;kBAAAE;AAAA,AAS2C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;CAT3C,oEAAA;kBAAAC;AAAA,AAU0C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;wBAV1C,2CAAA,oDACSM,9GAUNA;;AAXH,eAAA,CAAAR,WAAA;;;;AAAA;;;;;AAAA,OAAA9G,qBAAA,AAAAC,gBAAA4G,UAAA,AAAAI,iEAAA,AAAA9G,qBAAAyG;;AAAA,OAAA5G,qBAAA,AAAAC,gBAAA4G,UAAA;;;AAAA,aAAA,AAAA9H,gBAAA6H,zBAAMU;AAAN,AAAA,OAAAlH,eAAA,oBAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,4EAAA,UAAA,sEAAA,MAAA,iEAAA,4BAAA,sEAAA,OAAA,2DAAA,OAAA,gEAAA,+BAAA,uEAAA;kBAAA2G;AAAA,AAS2C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;CAT3C,oEAAA;kBAAAC;AAAA,AAU0C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;wBAV1C,2CAAA,oEAAA,AAAAC,iEAAA,AAAA5G,eAAAuG,hGACSU,9GAUNA;;;AAXH;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAnI,mBAAa,AAAA,mFAAOwH;qBAVxB,2CAAA,oDAMS,AAAA,gFAAKA;;AANd,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAAzG,qBAAA,AAAAC,gBAAAuG,UAAA,AAAAE,mDAAA,AAAAvG,qBAAAoG;;AAAA,OAAAvG,qBAAA,AAAAC,gBAAAuG,UAAA;;;AAAA,gBAAA,AAAAzH,gBAAAwH,5BAAMI;AAAN,AAAA,OAAAvG,eAAA,oBAAA,mFAAA,mDAAA,2CAAA,wDAAA,4BAAA,mFAAA,uJAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,4EAAA,pcAQQ,AAAA,mFAAOuG,wYAEX,iBAAAxH,qBAAA;kFAAA+H;AAAA,AAAA,YAAA7H,kBAAA,KAAA;AAAA,AAAA,IAAA6H,eAAAA;;AAAA,AAAA,IAAA5H,yBAAA,AAAAL,cAAAiI;AAAA,AAAA,GAAA5H;AAAA,AAAA,IAAA4H,eAAA5H;AAAA,AAAA,GAAA,AAAAC,6BAAA2H;AAAA,IAAA1H,kBAkxEqC,AAAAsK,sBAAA5C;IAlxErCzH,qBAAA,AAAAC,gBAAAF;IAAA2H,WAAA,AAAAvH,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA2H,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3H;AAAA,aAAA,AAAAK,eAAAN,gBAAA4H,xCAAME;AAAN,AAAA,AAAA,AAAAvH,uBAAAoH,SAAA,oBAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,4EAAA,UAAA,sEAAA,MAAA,iEAAA,4BAAA,sEAAA,OAAA,2DAAA,OAAA,gEAAA,+BAAA,uEAAA;kBAAAJ;AAAA,AAS2C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;CAT3C,oEAAA;kBAAAC;AAAA,AAU0C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;wBAV1C,2CAAA,oDACSM,9GAUNA;;AAXH,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAApH,qBAAA,AAAAC,gBAAAkH,UAAA,AAAAE,iEAAA,AAAAlH,qBAAA+G;;AAAA,OAAAlH,qBAAA,AAAAC,gBAAAkH,UAAA;;;AAAA,aAAA,AAAApI,gBAAAmI,zBAAMI;AAAN,AAAA,OAAAlH,eAAA,oBAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,4EAAA,UAAA,sEAAA,MAAA,iEAAA,4BAAA,sEAAA,OAAA,2DAAA,OAAA,gEAAA,+BAAA,uEAAA;kBAAA2G;AAAA,AAS2C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;CAT3C,oEAAA;kBAAAC;AAAA,AAU0C,OAAA,AAAA,AAAAA,0CAAA,mBAAA;;wBAV1C,2CAAA,oEAAA,AAAAK,iEAAA,AAAAhH,eAAA6G,hGACSI,9GAUNA;;;AAXH;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAnI,mBAAa,AAAA,mFAAOwH;qBAVxB,2CAAA,wJAAA,AAAAD,mDAAA,AAAArG,eAAAkG,tKAMS,AAAA,gFAAKI;;;AANd;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxH,mBAAA,mFAAA,2CAAA,kDAAA,wDAAA,qDAAA,SAAA,2KAAA,2CAAA,kDAAA,sDAAA,qDAAA,SAAA,vUAEwB,AAAA,sFAAA,AAAAwB,gBAASwC,sRAGT,AAAA,oFAAA,AAAAxC,gBAASwC;;;;AAkB3C,mDAAA,nDAAMoE;AAAN,AAAA,0FAAA,mEAAA,mFAAA,iDAAA,4BAGG,iBAAM5J,OAAK,AAAA,oHAAA,AAAAgD,gBAAwBjF;AAAnC,AACE,GAAI,SAAA,RAAMiC;AAAV,0FAAA,mDAAA;;AAAA,oIAAA,1CAEGY,qCAAWZ;;;;AAEnB,qDAAA,rDAAM6J;AAAN,AAAA,0FAAA,mEAAA,mFAAA,iDAAA,gCAGG,iBAAM7J,OAAK,AAAA,mGAAA,AAAAgD,gBAAgBjF;AAA3B,AACE,GAAI,SAAA,RAAMiC;AAAV,0FAAA,mDAAA;;AAAA,oIAAA,1CAEGY,qCAAWZ;;;;AAGnB,wCAAA,xCAAM8J,wFAAaC;AAAnB,AACE,OAAqB,KAAAlK,KAAUkK;;AAEjC,6CAAA,7CAAMC,kGAAkBC;AAAxB,AAAA,+CAAA,sDAAA,iEAAA,2DAAA,+DAAA,qEAAA,kDAAA,qEAAA,sEAAA,ovBAAA,YAAA,eACO,AAAA,4FAAWA,9xBACT,AAACH,sCAAY,AAAA,oFAAOG,QAEd,qDAAA,mFAAA,wEAAA,hNAACtF,+CAAOsF,y4BACL,qDAAA,mFAAA,8EAAA,tNAACtF,+CAAOsF,pUAET,qDAAA,mFAAA,wEAAA,hNAACtF,+CAAOsF,6fACL,qDAAA,mFAAA,8EAAA,tNAACtF,+CAAOsF,7+BAChB,qDAAA,mFAAA,wEAAA,hNAACtF,+CAAOsF;;AAGpB,yCAAA,iDAAAC,1FAAMG;AAAN,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAA1J,4CAAA0J,eAAA,1EAA4BG;sBAA5B,AAAA7J,4CAAA0J,eAAA,7EAAyCI;cAAzC,AAAA9J,4CAAA0J,eAAA,rEAAyDK;AAAzD,AAAA,0FAAA,8EAAA,mFAAA,2EAAA,mFAAA,iDAAA,oBAAA,mFAAA,kJAAA,mFAAA,gIAAA,mFAAA,2EAAA,mFAAA,iDAAA,uBAAA,mFAAA,qJAAA,mFAAA,36BAIQ,CAAA,YAAiB,kDAAA,lDAACC,uDAAyBH,iKAC3C,CAAA,gBAAqB,2BAAA,MAAA,fAAIE,yeAGzB,CAAA,YAAiB,kDAAA,lDAACC,uDAAyBF,oKAC3C,CAAA,gBAAqB,0BAAA,MAAA,9BAAI,AAACxH,cAAIyH;;AAEtC,0CAAA,1CAAME;AAAN,AACE,IAAMC,UAAQ,AAAA,8FAAA,AAAA3H,gBAAcjF;IACtB6M,cAAY,AAAA,uGAAA,AAAA5H,gBAAkBjF;AADpC,AAAA,0FAAA,mEAAA,mFAAA,iDAAA,wBAAA,mFAAA,2EAAA,mFAAA,uDAAA,mFAAA,kDAAA,mFAAA,iDAAA,eAAA,mFAAA,iDAAA,eAAA,mFAAA,iDAAA,gBAAA,mFAAA,iDAAA,WAAA,mFAAA,iDAAA,gBAAA,mFAAA,iDAAA,+BAAA,mFAAA,sDAcK,iBAAAyD,qBAAA,gEAAAqJ;AAAA,AAAA,YAAAnJ,kBAAA,KAAA;AAAA,AAAA,IAAAmJ,eAAAA;;AAAA,AAAA,IAAAlJ,qBAAA,AAAAL,cAAAuJ;AAAA,AAAA,GAAAlJ;AAAA,AAAA,IAAAkJ,eAAAlJ;AAAA,AAAA,GAAA,AAAAC,6BAAAiJ;AAAA,IAAAhJ,kBA2sE4C,AAAAsK,sBAAAtB;IA3sE5C/I,qBAAA,AAAAC,gBAAAF;IAAAiJ,WAAA,AAAA7I,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAiJ,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjJ;AAAA,YAAA,AAAAK,eAAAN,gBAAAkJ,vCAAMd;AAAN,AAAA,AAAA,AAAA7H,uBAAA0I,SAAA,oBAAA,mFAAA,iDAAA,mFAAA,qEAAA,2CAAA,6DAAA;;AAAA,AAIgB,+GAAA,xGAACrM,mDAAMV,oCAAUkN,0FACX;kBAAKC;AAAL,AAAW,GAAI,AAACrI,6CAAEqI,KAAK,AAAA,gFAAKjB;AAAjB;;AAA6B,OAAA,gFAAKA;;;;;SALnE,mFAAA,oJAAA,mFAAA,6JAAA,mFAAA,+JAAA,mFAAA,iDAAA,YAAA,mFAAA,oKAAA,mFAAA,u4BAAA,2CAAA,oDACS,AAAA,gFAAKA,rlEAKL,AAAA,oFAAOA,mJACP,AAAA,6FAAYA,mJACZ,AAAA,+FAAaA,mSAEb,AAAA,oGAAgBA,mJAChB,AAAA,mGAAeA,uBACrB,oJAAA,AAAA,mFAAA,kDAAA,mFAAA,sFAAA,2CAAA,6DAAA,YAAA,wJAAA,5sBAAM,AAACpH,6CAAE+H,YAAY,AAAA,gFAAKX,8fAGrBI,uCAAaJ;;AAfrB,eAAA,CAAAc,WAAA;;;;AAAA;;;;;AAAA,OAAA1I,qBAAA,AAAAC,gBAAAwI,UAAA,AAAAE,sDAAA,AAAAxI,qBAAAqI;;AAAA,OAAAxI,qBAAA,AAAAC,gBAAAwI,UAAA;;;AAAA,YAAA,AAAA1J,gBAAAyJ,xBAAMZ;AAAN,AAAA,OAAAxH,eAAA,oBAAA,mFAAA,iDAAA,mFAAA,qEAAA,2CAAA,6DAAA;;AAAA,AAIgB,+GAAA,xGAAChE,mDAAMV,oCAAUkN,0FACX,WAAKC;AAAL,AAAW,GAAI,AAACrI,6CAAEqI,KAAK,AAAA,gFAAKjB;AAAjB;;AAA6B,OAAA,gFAAKA;;;;SALnE,mFAAA,oJAAA,mFAAA,6JAAA,mFAAA,+JAAA,mFAAA,iDAAA,YAAA,mFAAA,oKAAA,mFAAA,u4BAAA,2CAAA,oJAAA,AAAAe,sDAAA,AAAAtI,eAAAmI,rKACS,AAAA,gFAAKZ,rlEAKL,AAAA,oFAAOA,mJACP,AAAA,6FAAYA,mJACZ,AAAA,+FAAaA,mSAEb,AAAA,oGAAgBA,mJAChB,AAAA,mGAAeA,uBACrB,oJAAA,AAAA,mFAAA,kDAAA,mFAAA,sFAAA,2CAAA,6DAAA,YAAA,wJAAA,5sBAAM,AAACpH,6CAAE+H,YAAY,AAAA,gFAAKX,8fAGrBI,uCAAaJ;;;AAfrB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzI,mBAAY,AAAC0D,4CAAI8E,2CAAiBW;;;AAiBzC,wCAAA,xCAAMQ;AAAN,AAAA,0FAAA,mEAAA,mFAAA,iDAAA,sBAAA,mFAAA,8CAAA;;AAKA,qCAAA,rCAAMC,kFAAUC,GAAGC,MAAMC;AAAzB,AAAA,0FAAA,kEAAA,2CAAA,oHAAA,sIAAA,6DAAA,lQAEU,CAAA,gDAASF,sEACR,+DAAA,AAAA,SAAA,tEAAM,AAACxI,6CAAE0I,WAAWF;AAH/B,AAIe,8GAAA,kEAAA,zKAAC5M,mDAAMR,oCAAUS;WAC7B4M;;AAEH,uCAAA,vCAAME;AAAN,AACE,IAAMD,aAAW,AAAA,+FAAA,AAAAvI,gBAAcjF;IACzB0N,mBAAW,AAAA,gGAAA,AAAAzI,gBAAc/E;AAD/B,AAAA,0FAAA,iEAAA,mFAAA,uEAAA,mFAAA,6EAAA,2CAAA,6DAAA;AAAA,AAKiB,+GAAA,xGAACQ,mDAAMR,oCAAUgN,mFAAmBlI;WALrD,mFAAA,gFAAA,mFAAA,qHAAA,mFAAA,qEAAA,2CAAA,oHAAA,mFAAA,sEAAA,sHAAA,aAAA,gCAAA,sHAAA,eAAA,kCAAA,sHAAA,wBAAA,2CAAA,sHAAA,gBAAA,mCAAA,sHAAA,UAAA,jgCAQ0B,oCAAA,AAAA,UAAA,5BAAM0I,sRAE1BL,6DAAmCG,sGACnCH,iEAAuCG,sGACvCH,mFAAyDG,sGACzDH,mEAAyCG,sGACzCH,2DAAiCG;;AAEzC,yCAAA,zCAAMG;AAAN,AACE,IAAMH,aAAW,AAAA,+FAAA,AAAAvI,gBAAcjF;AAA/B,AAAA,0FAAA,mEAEG,iBAAA4N,WAAMJ;AAAN,AAAA,QAAAI;KAAA;AAAA,0FACgBpG;;;KADhB;AAAA,0FAEkBqE;;;KAFlB;AAAA,0FAG2BC;;;KAH3B;AAAA,0FAImBa;;;KAJnB;AAAA,0FAKaS;;;;AALb,0FAMG5F;;;;;AAER,gCAAA,hCAAMqG;AAAN,AAAA,0FAAA,mDAAA,gIAAA,kIAAA,mFAAA,uEAAA,mFAAA,gDAAA,2CAAA,qDAAA,6CAAA,wDAAA,SAAA,mDAAA,8BAAA,sBAAA,mFAAA,qDAAA,cAAA,mFAAA,qDAAA,/hCAEIJ,gIACAE;;AAUJ,uCAAA,vCAAMG;AAAN,AACE,AAACrM;;AACD,oBAAA,AAAAwD,gBAAWnF;AAAX;AAAA,AACE,AAAC4K,sBAAO5K,oCAAU,AAACiO,+BAAiB,wBAAA,xBAAiBC;;;AACvD,AAACpN;;AACD,+DAAA,AAAAqE,qDAAA,7GAACgJ,wEAAanO,wHAAW+N;;AAI3B,GAAA,QAAAnO,wCAAAC,iDAAAC,sDAAAsO;AAAA;AAAA,AAAA,AAASC,kCACP,AAACL","names":["js/goog.define","mnf-toolkit.frontend.site/BASE-PATH","js/mnf-toolkit","js/mnf-toolkit.frontend","js/mnf-toolkit.frontend.site","js/mnf-toolkit.frontend.site.root-atom","mnf-toolkit.frontend.site/root-atom","cljs.core.atom","mnf-toolkit.frontend.site/app-state","reagent.core.atom","mnf-toolkit.frontend.site/nav-state","mnf-toolkit.frontend.site/handle-hash-change","_","hash","js/window","tab","cljs.core/empty?","cljs.core.subs","cljs.core.swap_BANG_","cljs.core/assoc","mnf-toolkit.frontend.site/init-routing!","mnf-toolkit.frontend.site/load-edn-file","file-path","callback","js/console.log","js/fetch","response","js/Error","text","G__13523","cljs.reader.read_string","error","js/console.error","mnf-toolkit.frontend.site/load-data!","cljs.core.println","p1__13524#","mnf-toolkit.frontend.site/format-value","v","js/Date","cljs.core/integer?","mnf-toolkit.frontend.site/sort-by-key","data","key-name","ascending?","comparator","cljs.core/compare","cljs.core.comp","cljs.core/-","p1__13525#","cljs.core.sort_by","cljs.core.get","mnf-toolkit.frontend.site/league-columns","mnf-toolkit.frontend.site/player-columns","mnf-toolkit.frontend.site/data-table","table-type","state","columns","G__13526","cljs.core/Keyword","cljs.core/vec","cljs.core/keys","cljs.core/first","and__5000__auto__","cljs.core/seq","cljs.core.doall","iter__5480__auto__","s__13528","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__13530","cljs.core/chunk-buffer","i__13529","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13527","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","header","s","cljs.core._EQ_","cljs.core.update","cljs.core/not","cljs.core/deref","cljs.core/name","sorted-data","s__13532","b__13534","i__13533","iter__13531","row","cljs.core/hash","s__13536","b__13538","i__13537","iter__13535","s__13540","b__13542","i__13541","iter__13539","mnf-toolkit.frontend.site/sheet-id","mnf-toolkit.frontend.site/clean-google-response","clojure.string/replace","clojure.string/replace-first","mnf-toolkit.frontend.site/parse-google-response","e13545","cleaned-json","cljs.core.js__GT_clj","js/JSON.parse","rows","cljs.core.get_in","date-cell","cljs.core/second","formatted-date","teams-final-cell","cljs.core/last","p1__13543#","cljs.core.map","cljs.core.filter","cljs.core/identity","p1__13544#","e","mnf-toolkit.frontend.site/team-sheet","teams","reagent.core.create_class","c__11669__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__11670__auto__","switch__11505__auto__","state_13569","state_val_13570","inst_13548","inst_13549","inst_13550","inst_13551","inst_13552","cljs.core/PersistentHashMap","inst_13553","statearr-13571","cljs.core.async.impl.ioc-helpers/take!","inst_13555","statearr-13572","statearr-13573","statearr-13574","inst_13563","inst_13564","statearr-13575","statearr-13576","inst_13567","cljs.core.async.impl.ioc-helpers/return-chan","inst_13556","inst_13557","statearr-13578","statearr-13579","ex13577","statearr-13580","statearr-13581","statearr-13582","state-machine__11506__auto__","ret-value__11507__auto__","result__11508__auto__","cljs.core/keyword-identical?","ex__11509__auto__","e13583","statearr-13584","statearr-13585","state__11671__auto__","statearr-13586","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","cljs.core/reset!","temp__5802__auto__","date","s__13588","b__13590","i__13589","iter__13587","team-info","s__13592","b__13594","i__13593","p1__13546#","p1__13547#","iter__13591","s__13596","b__13598","i__13597","iter__13595","player","mnf-toolkit.frontend.site/league-table-component","mnf-toolkit.frontend.site/league-history-component","mnf-toolkit.frontend.site/format-date","date-str","mnf-toolkit.frontend.site/format-match-row","match","p__13599","map__13600","cljs.core/--destructure-map","mnf-toolkit.frontend.site/match-detail","bibs-players","colours-players","railway","clojure.string.join","mnf-toolkit.frontend.site/match-results","matches","expanded-id","s__13602","b__13604","i__13603","iter__13601","cljs.core/update","curr","mnf-toolkit.frontend.site/player-info","mnf-toolkit.frontend.site/nav-link","id","label","active-tab","mnf-toolkit.frontend.site/navigation","menu-open?","mnf-toolkit.frontend.site/main-content","G__13605","mnf-toolkit.frontend.site/app","mnf-toolkit.frontend.site/init!","reagent.dom.client/create-root","js/document","reagent.dom.client.render","js/mnf-toolkit.frontend.site.start","mnf-toolkit.frontend.site/start","cljs.core/chunk-first"],"sourcesContent":["(ns mnf-toolkit.frontend.site\n  #_{:clj-kondo/ignore [:unused-namespace]}\n  (:require [reagent.core :as r] \n            [reagent.dom.client :as rdom]\n            [clojure.string :as clojure.string]\n            [cljs.reader :as reader]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<! go]]\n            [goog.events :as events]\n            [clojure.edn :as edn]))\n\n(goog-define BASE-PATH \"\")  ; This will be set by shadow-cljs based on environment\n\n;; State\n(defonce root-atom (atom nil))\n\n(def app-state\n  (r/atom {:active-tab \"team-sheet\"\n           :league-table nil\n           :current-league-table nil\n           :match-data nil\n           :player-info nil}))\n\n(def nav-state (r/atom {:menu-open? false}))\n\n;; Navigation handling\n(defn handle-hash-change [_]\n  (let [hash (.. js/window -location -hash)\n        tab (if (empty? hash)\n              \"team-sheet\"  ; default tab\n              (subs hash 1))]  ; remove the # from the hash\n    (swap! app-state assoc :active-tab tab)))\n\n;; Set up hash change listener\n(defn init-routing! []\n  (.addEventListener js/window \"hashchange\" handle-hash-change)\n  (handle-hash-change nil))  ; Handle initial route\n\n;; Data Loading\n(defn load-edn-file [file-path callback]\n  (js/console.log \"Attempting to load:\" (str BASE-PATH file-path))\n  (-> (js/fetch (str BASE-PATH file-path))\n      (.then (fn [response]\n               (js/console.log \"Response status:\" (.-status response))\n               (if (.-ok response)\n                 (.text response)\n                 (throw (js/Error. (str \"Failed to load \" file-path \": \" (.-status response)))))))\n      (.then (fn [text]\n               (js/console.log \"Loaded text from\" file-path \":\" (subs text 0 100))\n               (callback (reader/read-string text))))\n      (.catch (fn [error]\n                (js/console.error \"Error loading\" file-path \":\" error)))))\n\n(defn load-data! []\n  (println \"Loading data...\")\n  (load-edn-file \"/data/mnf-data.edn\"\n                 #(do\n                    (println \"Data loaded\")\n                    (swap! app-state assoc\n                           :league-table (:league-table %)\n                           :current-league-table (:current-year-table %)\n                           :player-info (:player-info %)\n                           :match-data (:match-data %)))))\n\n;; Components\n(defn format-value [v]\n  (cond\n    (instance? js/Date v) (.toLocaleDateString v)\n    (number? v) (if (integer? v) v (.toFixed v 2))  ; Format decimals to 2 places, keep integers as is\n    :else (str v)))\n\n(defn sort-by-key [data key-name ascending?]\n  (let [comparator (if ascending? compare (comp - compare))]\n    (sort-by #(get % key-name) comparator data)))\n\n;; Define the column orders\n(def league-columns\n  [:player :played :won :drawn :lost :points :gf :ga :gd])\n\n(def player-columns\n  [:player :current-rating :lifetime-rating :baseline-rating])\n\n(defn data-table [data table-type]\n  (let [state (r/atom {:sort-key nil\n                       :ascending? true})\n        columns (case table-type\n                  :league league-columns\n                  :player player-columns\n                  (vec (keys (first data))))]\n    (fn [data _]\n      (if (and data (seq data))\n        [:table.data-table\n         [:thead\n          [:tr\n           (doall\n            (for [header columns]\n              ^{:key header}\n              [:th.sortable\n               {:on-click #(swap! state (fn [s]\n                                          (if (= (:sort-key s) header)\n                                            (update s :ascending? not)\n                                            {:sort-key header\n                                             :ascending? true})))\n                :class (when (= header (:sort-key @state))\n                         (if (:ascending? @state) \"sort-asc\" \"sort-desc\"))}\n               (name header)]))]]\n         [:tbody\n          (doall\n           (let [sorted-data (if (:sort-key @state)\n                               (sort-by-key data (:sort-key @state) (:ascending? @state))\n                               data)]\n             (for [row sorted-data]\n               ^{:key (hash row)}\n               [:tr\n                (doall\n                 (for [header columns]\n                   ^{:key (str (hash row) header)}\n                   [:td (format-value (get row header))]))])))]]\n        [:div \"No data available\"]))))\n\n;; Team Sheets - Sourced from google sheets\n(def sheet-id \"1qWimpverGPBkExhEkStyoUYsejExo6iqMW6AdDV0Q_g\")\n\n(defn clean-google-response [response]\n  (-> response\n      (clojure.string/replace \"/*O_o*/\\n\" \"\")\n      (clojure.string/replace \"google.visualization.Query.setResponse(\" \"\")\n      (clojure.string/replace-first \");\" \"\")))\n\n(defn parse-google-response [response]\n  (try\n    (let [cleaned-json (clean-google-response (:body response))\n          data (js->clj (js/JSON.parse cleaned-json) :keywordize-keys true)\n          rows (get-in data [:table :rows])\n          date-cell (get-in (second rows) [:c 3]) \n          formatted-date (get date-cell :v)\n          teams-final-cell (get-in (last rows) [:c 3 :v])]\n      {:team1 (->> rows\n                   rest\n                   (map #(get-in % [:c 0 :v]))\n                   (filter identity))\n       :team2 (->> rows\n                   rest\n                   (map #(get-in % [:c 1 :v]))\n                   (filter identity))\n       :match-date formatted-date\n       :teams-finalised teams-final-cell})\n    (catch js/Error e\n      (js/console.error \"Error during parsing:\" e)\n      {:team1 [] :team2 [] :match-date nil})))\n\n(defn team-sheet []\n  (let [teams (r/atom {:team1 [] \n                       :team2 []\n                       :match-date nil\n                       :teams-finalised nil})]\n    (r/create-class\n     {:component-did-mount\n      (fn []\n        (go\n          (let [url (str \"https://docs.google.com/spreadsheets/d/\"\n                         sheet-id\n                         \"/gviz/tq?\"\n                         \"tqx=out:json\"\n                         \"&sheet=team-sheet\"\n                         \"&range=B1:E9\"\n                         \"&headers=0\")\n                _ (js/console.log \"Fetching team sheet data from:\" url)\n                response (<! (http/get url {:with-credentials? false}))]\n            (try\n              (let [parsed-data (parse-google-response response)]\n                (reset! teams parsed-data))\n              (catch js/Error e\n                (js/console.error \"Error parsing response:\" e)))))) \n      \n      :reagent-render\n      (fn [] \n        [:div {:class \"team-sheet-container\"}\n         [:h2 (if-let [date (:match-date @teams)]\n                (str date \" - Match Teams\")\n                \"Unspecified Match Date - Teams\")] \n         [:h3 (if (= (:teams-finalised @teams) \"Yes\")\n                \"Teams Finalised\"\n                \"Teams Not Yet Decided, Check Back Later\")]\n         [:div {:class \"team-sheet-row\"}\n          (for [team-info [{:id :team1 \n                            :name \"Team 1\" \n                            :data (:team1 @teams)}\n                           {:id :team2 \n                            :name \"Team 2\" \n                            :data (:team2 @teams)}]]\n            ^{:key (:id team-info)}\n            [:div {:class \"team-sheet-column\"}\n             [:h3 (:name team-info)]\n             [:ul {:style {:list-style-type \"none\"}}\n              (for [player (:data team-info)]\n                ^{:key player}\n                [:li.p-2 \n                 {:style {:background-color \"#f5f5f5\"\n                          :border-radius \"5px\"\n                          :box-shadow \"0 2px 4px rgba(0,0,0,0.1)\"\n                          :margin-bottom \"10px\"\n                          :padding \"12px\"\n                          :transition \"all 0.1s ease-in-out\"}\n                  :on-mouse-over #(-> % .-target .-style (.setProperty \"background-color\" \"#e8e8e8\"))\n                  :on-mouse-out #(-> % .-target .-style (.setProperty \"background-color\" \"#f5f5f5\"))}\n                 player])]])]])})))\n\n(defn league-table-component []\n  [:div.section\n   [:h2 \"2025 League Table\"]\n   (let [data (:current-league-table @app-state)]\n     (if (nil? data)\n       [:div \"Loading league table...\"]\n       [data-table data :league]))])\n\n(defn league-history-component []\n  [:div.section\n   [:h2 \"All Time League Table\"]\n   (let [data (:league-table @app-state)]\n     (if (nil? data)\n       [:div \"Loading league table...\"]\n       [data-table data :league]))])\n\n;; Add data formatting functions\n(defn format-date [date-str]\n  (.toLocaleDateString (js/Date. date-str)))\n\n(defn format-match-row [match]\n  {:id (:match-id match)\n   :date (format-date (:date match))\n   :bibs-team \"Team Bibs\"\n   :bibs-score (get-in match [:team-bibs-data :goals])\n   :colours-score (get-in match [:team-colours-data :goals])\n   :colours-team \"Team Colours\"\n   :bibs-players (get-in match [:team-bibs-data :players])\n   :colours-players (get-in match [:team-colours-data :players])\n   :railway (get-in match [:team-bibs-data :railway])})\n\n;; Add match detail component\n(defn match-detail [{:keys [bibs-players colours-players railway]}]\n  [:div.match-detail\n   [:div.team-detail\n    [:h4 \"Team Bibs\"]\n    [:p (str \"Players: \" (clojure.string/join \", \" bibs-players))]\n    [:p (str \"Railway End: \" (if railway \"Yes\" \"No\"))]]\n   [:div.team-detail\n    [:h4 \"Team Colours\"]\n    [:p (str \"Players: \" (clojure.string/join \", \" colours-players))]\n    [:p (str \"Railway End: \" (if (not railway) \"Yes\" \"No\"))]]])\n\n(defn match-results []\n  (let [matches (:match-data @app-state)\n        expanded-id (:expanded-match @app-state)]\n    [:div.section\n     [:h2 \"Match Results\"]\n     [:table.data-table\n      [:thead\n       [:tr\n        [:th \"Date\"]\n        [:th \"Team\"]\n        [:th \"Score\"]\n        [:th \"\"]\n        [:th \"Score\"]\n        [:th \"Team\"]]]\n      [:tbody\n       (for [match (map format-match-row matches)]\n         ^{:key (:id match)}\n         [:<>\n          [:tr.clickable\n           {:on-click #(swap! app-state update :expanded-match\n                             (fn [curr] (if (= curr (:id match)) nil (:id match))))}\n           [:td (:date match)]\n           [:td (:bibs-team match)]\n           [:td (:bibs-score match)]\n           [:td \"-\"]\n           [:td (:colours-score match)]\n           [:td (:colours-team match)]]\n          (when (= expanded-id (:id match))\n            [:tr\n             [:td.match-detail-cell {:col-span 6}\n              [match-detail match]]])])]]]))\n\n(defn player-info []\n  [:div.section\n   [:h2 \"Player Info\"]\n   [:p \"Coming soon\"]])\n\n(defn nav-link [id label active-tab]\n  [:a.nav-link\n   {:href (str \"#\" id)\n    :class (when (= active-tab id) \"active\")\n    :on-click #(swap! nav-state assoc :menu-open? false)}  ; Close menu on click\n   label])\n\n(defn navigation []\n  (let [active-tab (:active-tab @app-state)\n        menu-open? (:menu-open? @nav-state)]\n    [:nav.navbar\n     [:div.nav-brand\n      [:button.hamburger\n       {:on-click #(swap! nav-state update :menu-open? not)}\n       [:span.hamburger-box\n        [:span.hamburger-inner]]]]\n     [:div.nav-menu {:class (when menu-open? \"is-open\")}\n      [:div.nav-left\n       [nav-link \"team-sheet\" \"Team Sheet\" active-tab]\n       [nav-link \"league-table\" \"League Table\" active-tab]\n       [nav-link \"all-time-league-table\" \"All Time League Table\" active-tab]\n       [nav-link \"match-results\" \"Match Results\" active-tab]\n       [nav-link \"players\" \"Player Info\" active-tab]]]]))\n\n(defn main-content []\n  (let [active-tab (:active-tab @app-state)]\n    [:div.content\n     (case active-tab\n       \"team-sheet\" [team-sheet]\n       \"league-table\" [league-table-component]\n       \"all-time-league-table\" [league-history-component]\n       \"match-results\" [match-results]\n       \"players\" [player-info]\n       [team-sheet])]))\n\n(defn app []\n  [:div\n   [navigation]\n   [main-content]\n   [:footer.footer\n    [:a {:href \"https://github.com/tbrooksbank/mnf-toolkit\"\n         :target \"_blank\"\n         :rel \"noopener noreferrer\"}\n     \"Source Code\"]\n    [:span \" | \"]\n    [:span \"Tom Brooksbank \u00a9 2025\"]]])\n\n;; Initialize app\n(defn init! []\n  (load-data!)\n  (when-not @root-atom\n    (reset! root-atom (rdom/create-root (.getElementById js/document \"app\"))))\n  (init-routing!)  ; Initialize routing\n  (rdom/render @root-atom [app]))\n\n;; Initialize once\n#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}\n(defonce start\n  (init!))"]}